// Code generated by github.com/light-speak/lighthouse, YOU CAN FUCKING EDIT BY YOURSELF.
package resolver

import (
  "github.com/light-speak/lighthouse/context"
  "fmt"
  "github.com/light-speak/lighthouse/graphql/excute"
  "user/models"
  "github.com/light-speak/lighthouse/graphql/model"
)

func init() {
  excute.AddResolver("getPost", func(ctx *context.Context, args map[string]any) (interface{}, error) {
    fuck, ok := args["fuck"].(string)
    if !ok {
      return nil, fmt.Errorf("argument: 'fuck' is not a string, got %T", args["fuck"])
    }
    res, err := GetPostResolver(ctx, fuck)
    if res == nil {
      return nil, err
    }
    return model.StructToMap(res)
  })
  excute.AddResolver("getPostIds", func(ctx *context.Context, args map[string]any) (interface{}, error) {
    res, err := GetPostIdsResolver(ctx)
    if res == nil {
      return nil, err
    }
    return res, nil
  })
  excute.AddResolver("getPosts", func(ctx *context.Context, args map[string]any) (interface{}, error) {
    fuck, ok := args["fuck"].(string)
    if !ok {
      return nil, fmt.Errorf("argument: 'fuck' is not a string, got %T", args["fuck"])
    }
    list, err := GetPostsResolver(ctx, fuck)
    if list == nil {
      return nil, err
    }
    res := []map[string]interface{}{}
    for _, item := range list {
      itemMap, err := model.StructToMap(item)
      if err != nil {
        return nil, err
      }
      res = append(res, itemMap)
    }
    return res, nil
  })
  excute.AddResolver("testPostEnum", func(ctx *context.Context, args map[string]any) (interface{}, error) {
    enumValue, ok := models.TestEnumMap[args["enum"].(string)]
    if !ok {
      return nil, fmt.Errorf("argument: 'enum' is not a models.TestEnum, got %T", args["enum"])
    }
    enum := &enumValue
    res, err := TestPostEnumResolver(ctx, enum)
    return res, err
  })
  excute.AddResolver("testPostInput", func(ctx *context.Context, args map[string]any) (interface{}, error) {
    input, err := models.MapToTestInput(args["input"].(map[string]interface{}))
    if err != nil {
      return nil, fmt.Errorf("argument: 'input' is not a models.TestInput, got %T", args["input"])
    }
    res, err := TestPostInputResolver(ctx, input)
    return res, err
  })
}
