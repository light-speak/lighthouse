// Code generated by github.com/light-speak/lighthouse, YOU CAN FUCKING EDIT BY YOURSELF.
package message

import (
	"fmt"
	"os"

	"github.com/light-speak/lighthouse/command"
	"github.com/light-speak/lighthouse/graphql/model/generate"
)

type Publisher struct{}

func (j *Publisher) Name() string {
	// Func:Name user code start. Do not remove this comment.
	return "generate:publisher"
	// Func:Name user code end. Do not remove this comment.
}

func (p Publisher) Usage() string {
	// Func:Usage user code start. Do not remove this comment.
	return "generate publisher by lighthouse cli"
	// Func:Usage user code end. Do not remove this comment.
}

func (p Publisher) Args() []*command.CommandArg {
	return []*command.CommandArg{
		// Func:Args user code start. Do not remove this comment.
		{
			Name:     "name",
			Type:     command.String,
			Usage:    "publisher name",
			Required: true,
		},
		// Func:Args user code end. Do not remove this comment.
	}
}

func (p Publisher) Action() func(flagValues map[string]interface{}) error {
	return func(flagValues map[string]interface{}) error {
		// Func:Action user code start. Do not remove this comment.
		args, err := command.GetArgs(p.Args(), flagValues)
		if err != nil {
			return err
		}
		name, err := command.GetStringArg(args, "name")
		if err != nil {
			return err
		}
		if name == nil || *name == "" {
			return fmt.Errorf("publisher name is required and cannot be empty")
		}
		currentPath, err := os.Getwd()
		if err != nil {
			return err
		}
		err = generate.GenPublisher(*name, currentPath)
		if err != nil {
			return err
		}
		// Func:Action user code end. Do not remove this comment.
		return nil
	}
}

func (p Publisher) OnExit() func() {
	return func() {}
}

// Section: user code section start. Do not remove this comment.
// Section: user code section end. Do not remove this comment.
