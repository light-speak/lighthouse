// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"time"

	"github.com/light-speak/lighthouse/db"
)

type BaseModel interface {
	IsBaseModel()
	GetID() int64
	GetCreatedAt() time.Time
	GetUpdatedAt() time.Time
}

type BaseModelSoftDelete interface {
	IsBaseModelSoftDelete()
	GetID() int64
	GetCreatedAt() time.Time
	GetUpdatedAt() time.Time
	GetDeletedAt() *time.Time
}

type Post struct {
	Title     string     `json:"title"`
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt time.Time  `json:"updatedAt"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	UserID    int64      `json:"userId"`
	User      *User      `json:"user,omitempty"`
	// Custom GORM Model
	db.ModelSoftDelete `gorm:"embedded"`
}

func (Post) IsBaseModelSoftDelete()        {}
func (this Post) GetID() int64             { return this.ID }
func (this Post) GetCreatedAt() time.Time  { return this.CreatedAt }
func (this Post) GetUpdatedAt() time.Time  { return this.UpdatedAt }
func (this Post) GetDeletedAt() *time.Time { return this.DeletedAt }

func (Post) IsEntity() {}

type User struct {
	ID    int64   `json:"id"`
	Posts []*Post `json:"posts"`
}

func (User) IsEntity() {}

func init() {
	db.Init()
	db.GetDb().AutoMigrate(

		&Post{},
	)
}
