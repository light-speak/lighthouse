package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.53

import (
	"context"
	"fmt"
	"post/graph/generate"
	"post/graph/models"
	"search/kitex_gen/search"

	"github.com/light-speak/lighthouse/graphql/resolver"
	"github.com/light-speak/lighthouse/log"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, userID int64) (*models.Post, error) {
	createPost := &models.Post{
		Title: title, Content: content, UserID: userID,
	}
	tx := r.Db
	if err := resolver.ResolveData(ctx, tx, "createPost", createPost, resolver.Option{Type: &resolver.Mutation, MutationType: &resolver.CreateMutation}); err != nil {
		return nil, err
	}

	return generate.MergePost(ctx, createPost)
}

// PublishPost is the resolver for the publishPost field.
func (r *mutationResolver) PublishPost(ctx context.Context, id int64) (*models.Post, error) {
	post := &models.Post{
		Title:   "simple post2312321321321",
		Content: "simple content1111111",
		UserID:  1,
	}
	tx := r.Db
	if err := tx.Create(post).Error; err != nil {
		return nil, err
	}
	searchClient := (*r.Resolver.SearchClient)
	document := &search.Document{
		Id:      post.IndexName(),
		Content: post.GetIndexData(),
	}
	if err := searchClient.IndexDocument(ctx, post.IndexName(), document); err != nil {
		log.Error("Error indexing document: %v", err)
		return nil, err
	}
	return generate.MergePost(ctx, post)
}

// SearchPost is the resolver for the searchPost field.
func (r *mutationResolver) SearchPost(ctx context.Context, query string) ([]*models.Post, error) {
	panic(fmt.Errorf("not implemented: SearchPost - searchPost"))
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*models.Post, error) {
	var posts []*models.Post
	tx := r.Db
	tx = tx.Scopes(models.PostScopePublished(ctx))
	tx = tx.Scopes(models.PostScopeHot(ctx))

	if err := resolver.ResolveData(ctx, tx, "posts", &posts, resolver.Option{Type: &resolver.Query, QueryType: &resolver.ListQuery}); err != nil {
		return nil, err
	}
	return generate.MergePosts(ctx, posts)
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id int64) (*models.Post, error) {
	var post *models.Post
	tx := r.Db
	if err := resolver.ResolveData(ctx, tx, "post", &post, resolver.Option{Type: &resolver.Query, QueryType: &resolver.OneQuery}); err != nil {
		return nil, err
	}
	return generate.MergePost(ctx, post)
}

// Mutation returns generate.MutationResolver implementation.
func (r *Resolver) Mutation() generate.MutationResolver { return &mutationResolver{r} }

// Query returns generate.QueryResolver implementation.
func (r *Resolver) Query() generate.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
