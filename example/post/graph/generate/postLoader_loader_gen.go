// Code generated by github.com/light-speak/lighthouse, DO NOT EDIT.
package generate

import (
    "sync"
    "time"
		"fmt"

    "post/graph/models"
)

// PostLoaderConfig 定义了创建新 PostLoader 的配置
type PostLoaderConfig struct {
	// Fetch 是一个提供数据加载器数据的方法
	Fetch    func(keys []int64) ([]*models.Post, []error)
	// Wait 是在发送批次之前等待的时间
	Wait     time.Duration
	// MaxBatch 将限制一批中发送的最大键数，0 = 不限制
	MaxBatch int
}

// NewPostLoader 创建一个新的 PostLoader
func NewPostLoader(config PostLoaderConfig) *PostLoader {
	return &PostLoader{
		fetch:    config.Fetch,
		wait:     config.Wait,
		maxBatch: config.MaxBatch,
	}
}

// PostLoader 批量处理和缓存请求
type PostLoader struct {
	// fetch 是一个提供数据加载器数据的方法
	fetch    func(keys []int64) ([]*models.Post, []error)
	// wait 是在发送批次之前等待的时间
	wait     time.Duration
	// maxBatch 将限制一批中发送的最大键数，0 = 不限制
	maxBatch int

	// cache 是一个懒加载的缓存
	cache map[int64]*models.Post
	// batch 是当前的批次。键将继续收集，直到超时，然后所有内容将发送到 fetch 方法并输出给监听器
	batch *postLoaderBatch
	// mu 是用于保护并发访问的互斥锁
	mu    sync.Mutex
}

// postLoaderBatch 表示一批加载操作
type postLoaderBatch struct {
	keys    []int64
	data    []*models.Post
	error   []error
	closing bool
	done    chan struct{}
}

// Load 通过键加载 Post，自动应用批处理和缓存
func (l *PostLoader) Load(key int64) (*models.Post, error) {
	return l.LoadThunk(key)()
}

// LoadThunk 返回一个函数，调用时会阻塞等待 Post
func (l *PostLoader) LoadThunk(key int64) func() (*models.Post, error) {
	l.mu.Lock()
	if it, ok := l.cache[key]; ok {
		l.mu.Unlock()
		return func() (*models.Post, error) {
			return it, nil
		}
	}
	if l.batch == nil {
		l.batch = &postLoaderBatch{done: make(chan struct{})}
	}
	batch := l.batch
	pos := batch.keyIndex(l, key)
	l.mu.Unlock()

	return func() (*models.Post, error) {
		<-batch.done

		if pos < len(batch.data) {
			data := batch.data[pos]
			if batch.error == nil || len(batch.error) == 0 {
				l.mu.Lock()
				l.unsafeSet(key, data)
				l.mu.Unlock()
				return data, nil
			}
			return data, batch.error[pos]
		}

		return nil, fmt.Errorf("未找到键为 %d 的 Post", key)
	}
}

// LoadAll 一次性获取多个键
func (l *PostLoader) LoadAll(keys []int64) ([]*models.Post, []error) {
	results := make([]func() (*models.Post, error), len(keys))

	for i, key := range keys {
		results[i] = l.LoadThunk(key)
	}

	posts := make([]*models.Post, len(keys))
	errors := make([]error, len(keys))
	for i, thunk := range results {
		posts[i], errors[i] = thunk()
	}
	return posts, errors
}

// LoadAllThunk 返回一个函数，调用时会阻塞等待多个 Post
func (l *PostLoader) LoadAllThunk(keys []int64) func() ([]*models.Post, []error) {
	results := make([]func() (*models.Post, error), len(keys))
	for i, key := range keys {
		results[i] = l.LoadThunk(key)
	}
	return func() ([]*models.Post, []error) {
		posts := make([]*models.Post, len(keys))
		errors := make([]error, len(keys))
		for i, thunk := range results {
			posts[i], errors[i] = thunk()
		}
		return posts, errors
	}
}

// Prime 使用提供的键和值预填充缓存
func (l *PostLoader) Prime(key int64, value *models.Post) bool {
	l.mu.Lock()
	defer l.mu.Unlock()
	if _, found := l.cache[key]; !found {
		cpy := *value
		l.unsafeSet(key, &cpy)
		return true
	}
	return false
}

// Clear 从缓存中清除指定键的值
func (l *PostLoader) Clear(key int64) {
	l.mu.Lock()
	delete(l.cache, key)
	l.mu.Unlock()
}

// unsafeSet 在不加锁的情况下设置缓存值
func (l *PostLoader) unsafeSet(key int64, value *models.Post) {
	if l.cache == nil {
		l.cache = make(map[int64]*models.Post)
	}
	l.cache[key] = value
}

// keyIndex 返回键在批次中的索引，如果不存在则添加
func (b *postLoaderBatch) keyIndex(l *PostLoader, key int64) int {
	for i, existingKey := range b.keys {
		if key == existingKey {
			return i
		}
	}

	pos := len(b.keys)
	b.keys = append(b.keys, key)
	if pos == 0 {
		go b.startTimer(l)
	}

	if l.maxBatch != 0 && pos >= l.maxBatch-1 {
		if !b.closing {
			b.closing = true
			l.batch = nil
			go b.end(l)
		}
	}

	return pos
}

// startTimer 开始计时器，在等待时间后结束批次
func (b *postLoaderBatch) startTimer(l *PostLoader) {
	time.Sleep(l.wait)
	l.mu.Lock()
	defer l.mu.Unlock()

	if b.closing {
		return
	}

	l.batch = nil
	go b.end(l)
}

// end 结束批次，获取数据并关闭通道
func (b *postLoaderBatch) end(l *PostLoader) {
	b.data, b.error = l.fetch(b.keys)
	close(b.done)
}