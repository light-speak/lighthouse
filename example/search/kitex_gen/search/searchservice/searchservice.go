// Code generated by Kitex v0.11.3. DO NOT EDIT.

package searchservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	search "search/kitex_gen/search"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateIndex": kitex.NewMethodInfo(
		createIndexHandler,
		newSearchServiceCreateIndexArgs,
		newSearchServiceCreateIndexResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"IndexDocument": kitex.NewMethodInfo(
		indexDocumentHandler,
		newSearchServiceIndexDocumentArgs,
		newSearchServiceIndexDocumentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateDocument": kitex.NewMethodInfo(
		updateDocumentHandler,
		newSearchServiceUpdateDocumentArgs,
		newSearchServiceUpdateDocumentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteIndex": kitex.NewMethodInfo(
		deleteIndexHandler,
		newSearchServiceDeleteIndexArgs,
		newSearchServiceDeleteIndexResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Search": kitex.NewMethodInfo(
		searchHandler,
		newSearchServiceSearchArgs,
		newSearchServiceSearchResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ScrollSearch": kitex.NewMethodInfo(
		scrollSearchHandler,
		newSearchServiceScrollSearchArgs,
		newSearchServiceScrollSearchResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ContinueScrollSearch": kitex.NewMethodInfo(
		continueScrollSearchHandler,
		newSearchServiceContinueScrollSearchArgs,
		newSearchServiceContinueScrollSearchResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateOrUpdate": kitex.NewMethodInfo(
		createOrUpdateHandler,
		newSearchServiceCreateOrUpdateArgs,
		newSearchServiceCreateOrUpdateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	searchServiceServiceInfo                = NewServiceInfo()
	searchServiceServiceInfoForClient       = NewServiceInfoForClient()
	searchServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return searchServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return searchServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return searchServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "SearchService"
	handlerType := (*search.SearchService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "search",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func createIndexHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*search.SearchServiceCreateIndexArgs)

	err := handler.(search.SearchService).CreateIndex(ctx, realArg.IndexName, realArg.Mapping)
	if err != nil {
		return err
	}

	return nil
}
func newSearchServiceCreateIndexArgs() interface{} {
	return search.NewSearchServiceCreateIndexArgs()
}

func newSearchServiceCreateIndexResult() interface{} {
	return search.NewSearchServiceCreateIndexResult()
}

func indexDocumentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*search.SearchServiceIndexDocumentArgs)

	err := handler.(search.SearchService).IndexDocument(ctx, realArg.IndexName, realArg.Doc)
	if err != nil {
		return err
	}

	return nil
}
func newSearchServiceIndexDocumentArgs() interface{} {
	return search.NewSearchServiceIndexDocumentArgs()
}

func newSearchServiceIndexDocumentResult() interface{} {
	return search.NewSearchServiceIndexDocumentResult()
}

func updateDocumentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*search.SearchServiceUpdateDocumentArgs)

	err := handler.(search.SearchService).UpdateDocument(ctx, realArg.IndexName, realArg.Doc)
	if err != nil {
		return err
	}

	return nil
}
func newSearchServiceUpdateDocumentArgs() interface{} {
	return search.NewSearchServiceUpdateDocumentArgs()
}

func newSearchServiceUpdateDocumentResult() interface{} {
	return search.NewSearchServiceUpdateDocumentResult()
}

func deleteIndexHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*search.SearchServiceDeleteIndexArgs)

	err := handler.(search.SearchService).DeleteIndex(ctx, realArg.IndexName)
	if err != nil {
		return err
	}

	return nil
}
func newSearchServiceDeleteIndexArgs() interface{} {
	return search.NewSearchServiceDeleteIndexArgs()
}

func newSearchServiceDeleteIndexResult() interface{} {
	return search.NewSearchServiceDeleteIndexResult()
}

func searchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*search.SearchServiceSearchArgs)
	realResult := result.(*search.SearchServiceSearchResult)
	success, err := handler.(search.SearchService).Search(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSearchServiceSearchArgs() interface{} {
	return search.NewSearchServiceSearchArgs()
}

func newSearchServiceSearchResult() interface{} {
	return search.NewSearchServiceSearchResult()
}

func scrollSearchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*search.SearchServiceScrollSearchArgs)
	realResult := result.(*search.SearchServiceScrollSearchResult)
	success, err := handler.(search.SearchService).ScrollSearch(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSearchServiceScrollSearchArgs() interface{} {
	return search.NewSearchServiceScrollSearchArgs()
}

func newSearchServiceScrollSearchResult() interface{} {
	return search.NewSearchServiceScrollSearchResult()
}

func continueScrollSearchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*search.SearchServiceContinueScrollSearchArgs)
	realResult := result.(*search.SearchServiceContinueScrollSearchResult)
	success, err := handler.(search.SearchService).ContinueScrollSearch(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSearchServiceContinueScrollSearchArgs() interface{} {
	return search.NewSearchServiceContinueScrollSearchArgs()
}

func newSearchServiceContinueScrollSearchResult() interface{} {
	return search.NewSearchServiceContinueScrollSearchResult()
}

func createOrUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*search.SearchServiceCreateOrUpdateArgs)

	err := handler.(search.SearchService).CreateOrUpdate(ctx, realArg.IndexName, realArg.Doc)
	if err != nil {
		return err
	}

	return nil
}
func newSearchServiceCreateOrUpdateArgs() interface{} {
	return search.NewSearchServiceCreateOrUpdateArgs()
}

func newSearchServiceCreateOrUpdateResult() interface{} {
	return search.NewSearchServiceCreateOrUpdateResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateIndex(ctx context.Context, indexName string, mapping string) (err error) {
	var _args search.SearchServiceCreateIndexArgs
	_args.IndexName = indexName
	_args.Mapping = mapping
	var _result search.SearchServiceCreateIndexResult
	if err = p.c.Call(ctx, "CreateIndex", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) IndexDocument(ctx context.Context, indexName string, doc *search.Document) (err error) {
	var _args search.SearchServiceIndexDocumentArgs
	_args.IndexName = indexName
	_args.Doc = doc
	var _result search.SearchServiceIndexDocumentResult
	if err = p.c.Call(ctx, "IndexDocument", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) UpdateDocument(ctx context.Context, indexName string, doc *search.Document) (err error) {
	var _args search.SearchServiceUpdateDocumentArgs
	_args.IndexName = indexName
	_args.Doc = doc
	var _result search.SearchServiceUpdateDocumentResult
	if err = p.c.Call(ctx, "UpdateDocument", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) DeleteIndex(ctx context.Context, indexName string) (err error) {
	var _args search.SearchServiceDeleteIndexArgs
	_args.IndexName = indexName
	var _result search.SearchServiceDeleteIndexResult
	if err = p.c.Call(ctx, "DeleteIndex", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) Search(ctx context.Context, request *search.SearchRequest) (r *search.SearchResponse, err error) {
	var _args search.SearchServiceSearchArgs
	_args.Request = request
	var _result search.SearchServiceSearchResult
	if err = p.c.Call(ctx, "Search", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ScrollSearch(ctx context.Context, request *search.ScrollSearchRequest) (r *search.SearchResponse, err error) {
	var _args search.SearchServiceScrollSearchArgs
	_args.Request = request
	var _result search.SearchServiceScrollSearchResult
	if err = p.c.Call(ctx, "ScrollSearch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ContinueScrollSearch(ctx context.Context, request *search.ContinueScrollSearchRequest) (r *search.SearchResponse, err error) {
	var _args search.SearchServiceContinueScrollSearchArgs
	_args.Request = request
	var _result search.SearchServiceContinueScrollSearchResult
	if err = p.c.Call(ctx, "ContinueScrollSearch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateOrUpdate(ctx context.Context, indexName string, doc *search.Document) (err error) {
	var _args search.SearchServiceCreateOrUpdateArgs
	_args.IndexName = indexName
	_args.Doc = doc
	var _result search.SearchServiceCreateOrUpdateResult
	if err = p.c.Call(ctx, "CreateOrUpdate", &_args, &_result); err != nil {
		return
	}
	return nil
}
