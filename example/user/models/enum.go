// Code generated by github.com/light-speak/lighthouse, DO NOT EDIT.
package models




type SortOrder int8

const (
  ASC SortOrder = 1
  DESC SortOrder = -1
)

func (e SortOrder) ToString() string {
  switch e {
  case ASC:
    return "ASC"
  case DESC:
    return "DESC"
  default:
    return "unknown"
  }
}

var SortOrderMap = map[string]SortOrder{
  "ASC": ASC,
  "DESC": DESC,
}
type TestEnum int8

const (
  A TestEnum = 1
  B TestEnum = 2
)

func (e TestEnum) ToString() string {
  switch e {
  case A:
    return "A"
  case B:
    return "B"
  default:
    return "unknown"
  }
}

var TestEnumMap = map[string]TestEnum{
  "A": A,
  "B": B,
}
type TestEnum2 int8

const (
  A2 TestEnum2 = iota
  B2
)

func (e TestEnum2) ToString() string {
  switch e {
  case A2:
    return "A2"
  case B2:
    return "B2"
  default:
    return "unknown"
  }
}

var TestEnum2Map = map[string]TestEnum2{
  "A2": A2,
  "B2": B2,
}
