// Code generated by github.com/light-speak/lighthouse, DO NOT EDIT.

package graph

import "context"

{{ range $mergeType := .MergeTypes }}
func (r *Resolver) merge{{ ucFirst $mergeType.Model }}s(ctx context.Context, {{ lcFirst $mergeType.Model }}s []*{{ ucFirst $mergeType.Model }}) ([]*{{ ucFirst $mergeType.Model }}, error) {
	var err error
	for _, {{ lcFirst $mergeType.Model }} := range {{ lcFirst $mergeType.Model }}s {
		{{ lcFirst $mergeType.Model }}, err = r.merge{{ ucFirst $mergeType.Model }}(ctx, {{ lcFirst $mergeType.Model }})
		if err != nil {
			return nil, err
		}
	}
	return {{ lcFirst $mergeType.Model }}s, nil
}

func (r *Resolver) merge{{ ucFirst $mergeType.Model }}(ctx context.Context, {{ lcFirst $mergeType.Model }} *{{ ucFirst $mergeType.Model }}) (*{{ ucFirst $mergeType.Model }}, error) {
    {{- range $mergeField := $mergeType.MergeField -}}
        {{- if eq $mergeField.Local "True" }}
            {{- lcFirst $mergeType.Model }}.{{ ucFirst $mergeField.Target }} = &{{ ucFirst $mergeField.Target }}{ID: {{ lcFirst $mergeType.Model }}.{{ ucFirstWithID $mergeField.Source }},}
        {{- else -}}
            if {{ lcFirst $mergeField.Target }}, err := r.Entity().Find{{ ucFirst $mergeField.Target }}ByID(ctx, {{ lcFirst $mergeType.Model }}.{{ ucFirstWithID $mergeField.Source }}); err != nil {
                return {{ lcFirst $mergeType.Model }}, nil
            } else {
                {{ lcFirst $mergeType.Model }}.{{ ucFirst $mergeField.Target }} = {{ lcFirst $mergeField.Target }}
            }
        {{ end -}}
	{{- end }}
	return {{ lcFirst $mergeType.Model }}, nil
}
{{ end }}


