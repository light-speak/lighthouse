// Code generated by github.com/light-speak/lighthouse, DO NOT EDIT.
package models

import  "fmt"


type TestInput struct {
  // description: <nil>
  E *bool `json:"E"`
  // description: <nil>
  Enum TestEnum `json:"Enum"`
  // description: 这是ID
  Id *string `json:"Id"`
}

func MapToTestInput(data map[string]interface{}) (*TestInput, error) {
  result := &TestInput{}
  
  e, ok := data["e"].(*bool)
  if !ok {
    return nil, fmt.Errorf("invalid value for field 'e', got %T", data["e"])
  }
  result.E = e
  
  enum, ok := TestEnumMap[data["enum"].(string)]
  if !ok {
    return nil, fmt.Errorf("invalid value for field 'enum', got %T", data["enum"])
  }
  result.Enum = enum
  
  id, ok := data["id"].(*string)
  if !ok {
    return nil, fmt.Errorf("invalid value for field 'id', got %T", data["id"])
  }
  result.Id = id
  return result, nil
}
