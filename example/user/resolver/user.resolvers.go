package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"
	"user/graph/generate"
	"user/graph/models"

	"github.com/light-speak/lighthouse/db"
	"github.com/light-speak/lighthouse/graphql/resolver"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string) (*models.User, error) {
	createUser := &models.User{
		Name: name, Email: email,
	}
	tx := r.Db
	if err := resolver.ResolveData(ctx, tx, "createUser", createUser, resolver.Option{Type: &resolver.Mutation, MutationType: &resolver.CreateMutation}); err != nil {
		return nil, err
	}
	return generate.MergeUser(ctx, createUser)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int64, name string, email string) (*models.User, error) {
	updateUser := &models.User{
		ModelSoftDelete: db.ModelSoftDelete{ID: id}, Name: name, Email: email,
	}
	tx := r.Db
	if err := resolver.ResolveData(ctx, tx, "updateUser", updateUser, resolver.Option{Type: &resolver.Mutation, MutationType: &resolver.UpdateMutation}); err != nil {
		return nil, err
	}
	return generate.MergeUser(ctx, updateUser)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int64) (*models.User, error) {
	var user *models.User
	tx := r.Db
	if err := resolver.ResolveData(ctx, tx, "user", &user, resolver.Option{Type: &resolver.Query, QueryType: &resolver.OneQuery}); err != nil {
		return nil, err
	}
	return generate.MergeUser(ctx, user)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() generate.MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() generate.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
