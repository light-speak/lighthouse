// Code generated by github.com/light-speak/lighthouse, DO NOT EDIT.
package resolver

import (
  "github.com/light-speak/lighthouse/graphql/model"
  "fmt"
  "github.com/light-speak/lighthouse/resolve"
  "github.com/light-speak/lighthouse/context"
  "github.com/light-speak/lighthouse/graphql/excute"
  "github.com/light-speak/lighthouse/graphql"
)

func init() {
  excute.AddResolver("login", func(ctx *context.Context, args map[string]any, resolve resolve.Resolve) (interface{}, error) {
    r := resolve.(*Resolver)
    var name string
    if args["name"] != nil {
      pname, e := graphql.Parser.NodeStore.Scalars["String"].ScalarType.ParseValue(args["name"], nil)
      if e != nil {
        return nil, e
      }
      var ok bool
      name, ok = pname.(string)
      if !ok {
        return nil, fmt.Errorf("argument: 'name' is not a string, got %T", args["name"])
      }
    }
    res, err := r.LoginResolver(ctx, name)
    if err != nil {
      return nil, err
    }
    if res == nil {
      return nil, nil
    }
    return model.TypeToMap(res)
  })
}
