// Code generated by Kitex v0.11.3. DO NOT EDIT.

package searchservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	search "search/kitex_gen/search"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateIndex(ctx context.Context, indexName string, mapping string, callOptions ...callopt.Option) (err error)
	IndexDocument(ctx context.Context, indexName string, doc *search.Document, callOptions ...callopt.Option) (err error)
	UpdateDocument(ctx context.Context, indexName string, doc *search.Document, callOptions ...callopt.Option) (err error)
	DeleteIndex(ctx context.Context, indexName string, callOptions ...callopt.Option) (err error)
	Search(ctx context.Context, request *search.SearchRequest, callOptions ...callopt.Option) (r *search.SearchResponse, err error)
	ScrollSearch(ctx context.Context, request *search.ScrollSearchRequest, callOptions ...callopt.Option) (r *search.SearchResponse, err error)
	ContinueScrollSearch(ctx context.Context, request *search.ContinueScrollSearchRequest, callOptions ...callopt.Option) (r *search.SearchResponse, err error)
	CreateOrUpdate(ctx context.Context, indexName string, doc *search.Document, callOptions ...callopt.Option) (err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kSearchServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kSearchServiceClient struct {
	*kClient
}

func (p *kSearchServiceClient) CreateIndex(ctx context.Context, indexName string, mapping string, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateIndex(ctx, indexName, mapping)
}

func (p *kSearchServiceClient) IndexDocument(ctx context.Context, indexName string, doc *search.Document, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IndexDocument(ctx, indexName, doc)
}

func (p *kSearchServiceClient) UpdateDocument(ctx context.Context, indexName string, doc *search.Document, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateDocument(ctx, indexName, doc)
}

func (p *kSearchServiceClient) DeleteIndex(ctx context.Context, indexName string, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteIndex(ctx, indexName)
}

func (p *kSearchServiceClient) Search(ctx context.Context, request *search.SearchRequest, callOptions ...callopt.Option) (r *search.SearchResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Search(ctx, request)
}

func (p *kSearchServiceClient) ScrollSearch(ctx context.Context, request *search.ScrollSearchRequest, callOptions ...callopt.Option) (r *search.SearchResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ScrollSearch(ctx, request)
}

func (p *kSearchServiceClient) ContinueScrollSearch(ctx context.Context, request *search.ContinueScrollSearchRequest, callOptions ...callopt.Option) (r *search.SearchResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ContinueScrollSearch(ctx, request)
}

func (p *kSearchServiceClient) CreateOrUpdate(ctx context.Context, indexName string, doc *search.Document, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateOrUpdate(ctx, indexName, doc)
}
