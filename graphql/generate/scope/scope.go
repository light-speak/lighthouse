package scope

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/light-speak/lighthouse/log"
)

const scopeTemplate = `

func {{.ModelName}}Scope{{.ScopeName}}(ctx context.Context, {{.ParamName}} ...string) func(tx *gorm.DB) *gorm.DB {
	return func(tx *gorm.DB) *gorm.DB {
		return tx
	}
}
`

const scopeModelTemplate = `

func {{.ModelName}}ScopeModel(ctx context.Context, {{.ParamName}} ...string) func(tx *gorm.DB) *gorm.DB {
	return func(tx *gorm.DB) *gorm.DB {
		return tx.Model(&{{ .ModelName }}{})
	}
}
`

func Generate(model, scope string) error {
	modelName := strings.Title(model)
	scopeName := strings.Title(scope)
	fileName := filepath.Join("graph", "models", fmt.Sprintf("%s.scopes.go", model))

	// 检查文件是否存在，如果不存在则创建
	if err := createFileIfNotExist(fileName); err != nil {
		return fmt.Errorf("创建或检查文件失败: %v", err)
	}

	// 检查函数是否已存在
	if functionExists(fileName, modelName, scopeName) {
		log.Info("函数 %sScope%s 已存在于 %s 中。跳过生成。\n", modelName, scopeName, fileName)
		return nil
	}

	// 追加新的 scope 函数
	if err := appendScopeFunction(fileName, modelName, scopeName); err != nil {
		return fmt.Errorf("追加 scope 函数失败: %v", err)
	}

	log.Info("已将 scope 追加到文件: %s\n", fileName)
	return nil
}

func createFileIfNotExist(fileName string) error {
	if _, err := os.Stat(fileName); os.IsNotExist(err) {
		return createFileWithHeader(fileName)
	}
	return nil
}

func functionExists(fileName, modelName, scopeName string) bool {
	content, err := ioutil.ReadFile(fileName)
	if err != nil {
		log.Error("读取文件失败: %v", err)
		return false
	}
	functionSignature := fmt.Sprintf("func %sScope%s", modelName, scopeName)
	return strings.Contains(string(content), functionSignature)
}

func appendScopeFunction(fileName, modelName, scopeName string) error {
	file, err := os.OpenFile(fileName, os.O_APPEND|os.O_WRONLY, 0600)
	if err != nil {
		return fmt.Errorf("打开文件失败: %v", err)
	}
	defer file.Close()

	data := struct {
		ModelName string
		ScopeName string
		ParamName string
	}{
		ModelName: modelName,
		ScopeName: scopeName,
		ParamName: "values",
	}

	tmpl := template.Must(template.New("scope").Parse(scopeTemplate))
	return tmpl.Execute(file, data)
}

func createFileWithHeader(fileName string) error {
	file, err := os.Create(fileName)
	if err != nil {
		return err
	}
	defer file.Close()

	header := `// Code generated by github.com/light-speak/lighthouse, DO NOT EDIT.

package models

import (
	"context"
	"gorm.io/gorm"
)
`
	_, err = file.WriteString(header)
	return err
}

func ModelScope(model string) error {
	modelName := strings.Title(model)
	fileName := filepath.Join("graph", "models", fmt.Sprintf("%s.scopes.go", model))

	if err := ensureFileExists(fileName); err != nil {
		return fmt.Errorf("确保文件存在时出错: %v", err)
	}

	if functionExists(fileName, modelName, "Model") {
		log.Info("函数 %sScopeModel 已存在于 %s 中。跳过生成。\n", modelName, fileName)
		return nil
	}

	return appendScopeFunction(fileName, modelName, "Model")
}

func ensureFileExists(fileName string) error {
	if _, err := os.Stat(fileName); os.IsNotExist(err) {
		return createFileWithHeader(fileName)
	}
	return nil
}
