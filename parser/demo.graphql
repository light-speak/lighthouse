# 自定义标量类型
scalar DateTime 

# 定义一个接口
interface Node {
  id: ID!
}

interface Named {
  name: String!
}

# 定义一个实现了多个接口的类型
type User implements Node & Named {
  id: ID!
  name: String!
  age: Int
  email: String
  createdAt: DateTime
}

# 定义另一个实现了多接口的类型
type Product implements Node & Named {
  id: ID!
  name: String!
  price: Float!
  createdAt: DateTime
}

# 定义一个联合类型
union SearchResult = User | Product

# 定义一个枚举
enum Role {
  ADMIN
  USER
  GUEST
}

# 定义一个输入类型
input UserInput {
  name: String!
  age: Int
  email: String
}

# 定义查询操作
type Query {
  getUser(id: ID!): User
  listUsers: [User!]!
  getProduct(id: ID!, name: String): Product
  listProducts: [Product!]!
  search(query: String!): [SearchResult!]!
}

# 定义变更操作
type Mutation {
  createUser(input: UserInput!): User
  deleteUser(id: ID!): Boolean
  createProduct(name: String!, price: Float!): Product
  deleteProduct(id: ID!): Boolean
}

# 定义订阅操作
type Subscription {
  userCreated: User
  productCreated: Product
}


directive @test(name: String!) on FIELD_DEFINITION 
directive @testOnObj on OBJECT
directive @testOnArg on FIELD_DEFINITION 
