// Code generated by github.com/light-speak/lighthouse, DO NOT EDIT.
package models

import  "github.com/light-speak/lighthouse/graphql/model"


type Comment struct {
  model.Model
  Content string `json:"content" gorm:"type:varchar(255)" `
  CommentableId int64 `json:"commentable_id" gorm:"index:commentable" `
  CommentableType string `json:"commentable_type" gorm:"index:commentable;type:varchar(255)" `
  Commentable interface{} `json:"commentable" gorm:"-" `
}

func (*Comment) IsModel() bool { return true }
func (*Comment) TableName() string { return "comments" }
func (*Comment) TypeName() string { return "comment" }
func CommentEnumFields(key string) func(interface{}) interface{} {
  return nil
}

type User struct {
  model.Model
  Name string `gorm:"index;type:varchar(255)" json:"name" `
  MyPosts *[]Post `gorm:"comment:五二零" json:"my_posts" `
}

func (*User) IsModel() bool { return true }
func (*User) IsHasName() bool { return true }
func (this *User) GetName() string { return this.Name }
func (*User) TableName() string { return "users" }
func (*User) TypeName() string { return "user" }
func UserEnumFields(key string) func(interface{}) interface{} {
  return nil
}

type Article struct {
  model.Model
  Name string `json:"name" gorm:"type:varchar(255)" `
  Content string `json:"content" gorm:"type:varchar(255)" `
}

func (*Article) IsModel() bool { return true }
func (*Article) TableName() string { return "articles" }
func (*Article) TypeName() string { return "article" }
func ArticleEnumFields(key string) func(interface{}) interface{} {
  return nil
}

type Post struct {
  model.ModelSoftDelete
  Title string `json:"title" gorm:"index;type:varchar(255)" `
  UserId int64 `json:"user_id" gorm:"index" `
  TagId int64 `json:"tag_id" `
  User *User `json:"user" `
  Enum TestEnum `json:"enum" `
  Content string `json:"content" gorm:"type:varchar(255)" `
  BackId int64 `json:"back_id" `
  IsBool bool `json:"is_bool" gorm:"default:false" `
}

func (*Post) IsModel() bool { return true }
func (*Post) TableName() string { return "posts" }
func (*Post) TypeName() string { return "post" }
func PostEnumFields(key string) func(interface{}) interface{} {
  switch key {
  case "enum":
    return func(value interface{}) interface{} {
      switch v := value.(type) {
      case int64:
        return TestEnum(v)
      case int8:
        return TestEnum(v)
      default:
        return v
      }
    }
  }
  return nil
}


func Migrate() error {
	return model.GetDB().AutoMigrate(
    &Comment{},
    &User{},
    &Article{},
    &Post{},
  )
}