// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/light-speak/lighthouse/db"
)

type BaseModel interface {
	IsBaseModel()
	GetID() int64
	GetCreatedAt() time.Time
	GetUpdatedAt() time.Time
}

type BaseModelSoftDelete interface {
	IsBaseModelSoftDelete()
	GetID() int64
	GetCreatedAt() time.Time
	GetUpdatedAt() time.Time
	GetDeletedAt() *time.Time
}

type Post struct {
	Title     string     `json:"title"`
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt time.Time  `json:"updatedAt"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	UserID    int64      `json:"userId"`
	User      *User      `json:"user,omitempty"`
	// Custom GORM Model
	db.ModelSoftDelete `gorm:"embedded"`
}

func (Post) IsBaseModelSoftDelete()        {}
func (this Post) GetID() int64             { return this.ID }
func (this Post) GetCreatedAt() time.Time  { return this.CreatedAt }
func (this Post) GetUpdatedAt() time.Time  { return this.UpdatedAt }
func (this Post) GetDeletedAt() *time.Time { return this.DeletedAt }

func (Post) IsEntity() {}

type User struct {
	ID    int64   `json:"id"`
	Posts []*Post `json:"posts"`
}

func (User) IsEntity() {}

type SearchableAnalyzer string

const (
	SearchableAnalyzerIkMaxWord SearchableAnalyzer = "IK_MAX_WORD"
	SearchableAnalyzerIkSmart   SearchableAnalyzer = "IK_SMART"
)

var AllSearchableAnalyzer = []SearchableAnalyzer{
	SearchableAnalyzerIkMaxWord,
	SearchableAnalyzerIkSmart,
}

func (e SearchableAnalyzer) IsValid() bool {
	switch e {
	case SearchableAnalyzerIkMaxWord, SearchableAnalyzerIkSmart:
		return true
	}
	return false
}

func (e SearchableAnalyzer) String() string {
	return string(e)
}

func (e *SearchableAnalyzer) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchableAnalyzer(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchableAnalyzer", str)
	}
	return nil
}

func (e SearchableAnalyzer) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SearchableType string

const (
	SearchableTypeText        SearchableType = "TEXT"
	SearchableTypeKeyword     SearchableType = "KEYWORD"
	SearchableTypeLong        SearchableType = "LONG"
	SearchableTypeInteger     SearchableType = "INTEGER"
	SearchableTypeShort       SearchableType = "SHORT"
	SearchableTypeByte        SearchableType = "BYTE"
	SearchableTypeDouble      SearchableType = "DOUBLE"
	SearchableTypeFloat       SearchableType = "FLOAT"
	SearchableTypeHalfFloat   SearchableType = "HALF_FLOAT"
	SearchableTypeScaledFloat SearchableType = "SCALED_FLOAT"
	SearchableTypeDate        SearchableType = "DATE"
	SearchableTypeBoolean     SearchableType = "BOOLEAN"
	SearchableTypeIP          SearchableType = "IP"
)

var AllSearchableType = []SearchableType{
	SearchableTypeText,
	SearchableTypeKeyword,
	SearchableTypeLong,
	SearchableTypeInteger,
	SearchableTypeShort,
	SearchableTypeByte,
	SearchableTypeDouble,
	SearchableTypeFloat,
	SearchableTypeHalfFloat,
	SearchableTypeScaledFloat,
	SearchableTypeDate,
	SearchableTypeBoolean,
	SearchableTypeIP,
}

func (e SearchableType) IsValid() bool {
	switch e {
	case SearchableTypeText, SearchableTypeKeyword, SearchableTypeLong, SearchableTypeInteger, SearchableTypeShort, SearchableTypeByte, SearchableTypeDouble, SearchableTypeFloat, SearchableTypeHalfFloat, SearchableTypeScaledFloat, SearchableTypeDate, SearchableTypeBoolean, SearchableTypeIP:
		return true
	}
	return false
}

func (e SearchableType) String() string {
	return string(e)
}

func (e *SearchableType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchableType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchableType", str)
	}
	return nil
}

func (e SearchableType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "ASC"
	SortDirectionDesc SortDirection = "DESC"
)

var AllSortDirection = []SortDirection{
	SortDirectionAsc,
	SortDirectionDesc,
}

func (e SortDirection) IsValid() bool {
	switch e {
	case SortDirectionAsc, SortDirectionDesc:
		return true
	}
	return false
}

func (e SortDirection) String() string {
	return string(e)
}

func (e *SortDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortDirection", str)
	}
	return nil
}

func (e SortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func init() {
	db.Init()
	db.GetDb().AutoMigrate(

		&Post{},
	)
}
