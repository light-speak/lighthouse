# 自定义标量类型
scalar DateTime

# 定义接口
interface Node {
  id: ID!
}

interface Named {
  name: String!
}

# 定义实现了多个接口的类型
"用户啊"
type User implements Node & Named {
  id: ID!
  name: String!
  age: Int
  email: String
  role: Role!
  createdAt: DateTime
  friends: [User!]! @include(if: Boolean)
  orders: [Order!] @skip(if: Boolean) @testMulti(l: [[1, 2], [3, 4]])
}

# 定义另一个实现了多接口的类型
"商品啊"
type Product implements Node & Named {
  id: ID!
  name: String!
  price: Float!
  createdAt: DateTime
}

# 定义订单类型
type Order implements Node {
  id: ID!
  total: Float!
  product: Product!
  orderedAt: DateTime!
}

# 定义联合类型
union SearchResult = User | Product | Order

# 定义枚举
enum Role {
  ADMIN @enum(value: 1)
  USER @enum(value: 2)
  GUEST @enum(value: 3)
}

# 定义输入类型
input UserInput {
  name: String!
  age: Int
  email: String
  location: UserLocation
  role: Role
}

type UserLocation {
  lat: String!
  lng: String!
}

# 定义查询操作
type Query {
  getUser(id: ID!): User
  listUsers: [User!]!
  getProduct(id: ID!, name: String): Product
  listProducts: [Product!]!
  search(query: String!): [SearchResult!]!
}

# 定义变更操作
type Mutation {
  createUser(input: UserInput!): User
  deleteUser(id: ID!): Boolean
  createProduct(name: String!, price: Float!): Product
  deleteProduct(id: ID!): Boolean
  updateUser(id: ID!, input: UserInput!): User
  createOrder(userId: ID!, productId: ID!): Order
  updateUserLocation(id: ID!, location: UserLocation!): User
}

# 定义订阅操作
type Subscription {
  userCreated: User
  productCreated: Product
  orderCreated(userId: ID!): Order
}

# 定义扩展类型
extend type User {
  address: String
}

# 定义片段
fragment UserFields on User {
  id
  name
  email
  age
  role
  orders {
    id
    total
    product {
      id
      name
      price
    }
  }
}

fragment ProductFields on Product {
  id
  name
  price
  createdAt
}

# 定义指令
directive @test(name: String!) on FIELD_DEFINITION
directive @testMulti(l: [[Int!]!]!) on FIELD_DEFINITION | ARGUMENT_DEFINITION
