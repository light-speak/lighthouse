// Code generated by github.com/light-speak/lighthouse, YOU CAN FUCKING EDIT BY YOURSELF.
package cmd

import (
	"github.com/light-speak/lighthouse/lightcmd/initization"
)

type Init struct{}

func (c *Init) Name() string {
	// Func:Name user code start. Do not remove this comment.
	return "generate:init"
	// Func:Name user code end. Do not remove this comment.
}

func (c *Init) Usage() string {
	// Func:Usage user code start. Do not remove this comment.
	return "This is a command generated by light-cmd"
	// Func:Usage user code end. Do not remove this comment.
}

func (c *Init) Args() []*CommandArg {
	return []*CommandArg{
		// Func:Args user code start. Do not remove this comment.
		{
			Name:     "module",
			Type:     String,
			Required: true,
			Usage:    "Project module name like github.com/light-speak/lighthouse",
		},
		{
			Name:     "models",
			Type:     String,
			Required: true,
			Usage:    "project models split by [,], like: user,post,comment",
		},
		// Func:Args user code end. Do not remove this comment.
	}
}

func (c *Init) Action() func(flagValues map[string]interface{}) error {
	return func(flagValues map[string]interface{}) error {
		// Func:Action user code start. Do not remove this comment.
		args, err := GetArgs(c.Args(), flagValues)
		if err != nil {
			return err
		}

		module, err := GetStringArg(args, "module")
		if err != nil {
			return err
		}

		models, err := GetStringArg(args, "models")
		if err != nil {
			return err
		}

		err = initization.Run(*module, *models)
		if err != nil {
			return err
		}
		// Func:Action user code end. Do not remove this comment.
		return nil
	}
}

func (c *Init) OnExit() func() {
	return func() {
		// Func:OnExit user code start. Do not remove this comment.
		// Func:OnExit user code end. Do not remove this comment.
	}
}

func init() {
	AddCommand(&Init{})
}

// Section: user code section start. Do not remove this comment.
// Section: user code section end. Do not remove this comment.
