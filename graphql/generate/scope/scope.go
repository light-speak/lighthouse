package scope

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/light-speak/lighthouse/log"
)

const scopeTemplate = `

func {{.ModelName}}Scope{{.ScopeName}}(ctx context.Context, {{.ParamName}} ...string) func(tx *gorm.DB) *gorm.DB {
	return func(tx *gorm.DB) *gorm.DB {
		return tx
	}
}
`

const scopeModelTemplate = `

func {{.ModelName}}ScopeModel(ctx context.Context, {{.ParamName}} ...string) func(tx *gorm.DB) *gorm.DB {
	return func(tx *gorm.DB) *gorm.DB {
		return tx.Model(&{{ .ModelName }}{})
	}
}
`

func Generate(model string, scope string) error {
	// 将 scope 参数的首字母大写
	scopeName := strings.Title(scope)
	modelName := strings.Title(model)

	// 确定文件路径，将文件生成到 graph 目录下
	fileName := filepath.Join("graph", fmt.Sprintf("%s.scopes.go", model))

	// 检查函数是否已经存在
	if _, err := os.Stat(fileName); err == nil {
		content, err := ioutil.ReadFile(fileName)
		if err != nil {
			return fmt.Errorf("error reading file: %v", err)
		}

		functionSignature := fmt.Sprintf("func %sScope%s", modelName, scopeName)
		if strings.Contains(string(content), functionSignature) {
			log.Info("Function %sScope%s already exists in %s. Skipping generation.\n", modelName, scopeName, fileName)
			return nil
		}
	}

	var file *os.File
	var err error
	if _, err := os.Stat(fileName); os.IsNotExist(err) {
		file, err = os.Create(fileName)
		if err != nil {
			return fmt.Errorf("error creating file: %v", err)
		}
		defer file.Close()

		// 文件第一次创建时写入包名和import
		_, err = file.WriteString(fmt.Sprintf("// Code generated by github.com/light-speak/lighthouse, DO NOT EDIT.\n\npackage %s\n\nimport (\n\"context\"\n\"gorm.io/gorm\"\n)\n", "graph"))
		if err != nil {
			return fmt.Errorf("error writing to file: %v", err)
		}
	} else {
		file, err = os.OpenFile(fileName, os.O_APPEND|os.O_WRONLY, 0600)
		if err != nil {
			return fmt.Errorf("error opening file: %v", err)
		}
		defer file.Close()
	}

	data := struct {
		ModelName string
		ScopeName string
		ParamName string
	}{
		ModelName: modelName,
		ScopeName: scopeName,
		ParamName: "values",
	}

	tmpl := template.Must(template.New("scope").Parse(scopeTemplate))
	err = tmpl.Execute(file, data)
	if err != nil {
		return fmt.Errorf("error executing template: %v", err)
	}

	log.Info("Appended scope to file: %s\n", fileName)
	return nil
}

func ModelScope(model string) error {
	// 将 scope 参数的首字母大写
	modelName := strings.Title(model)

	// 确定文件路径，将文件生成到 graph 目录下
	fileName := filepath.Join("graph", fmt.Sprintf("%s.scopes.go", model))

	// 检查函数是否已经存在
	if _, err := os.Stat(fileName); err == nil {
		content, err := ioutil.ReadFile(fileName)
		if err != nil {
			return fmt.Errorf("error reading file: %v", err)
		}

		functionSignature := fmt.Sprintf("func %sScopeModel", modelName)
		if strings.Contains(string(content), functionSignature) {
			log.Info("Function %sScopeModel already exists in %s. Skipping generation.\n", modelName, fileName)
			return nil
		}
	}

	var file *os.File
	var err error
	if _, err := os.Stat(fileName); os.IsNotExist(err) {
		file, err = os.Create(fileName)
		if err != nil {
			return fmt.Errorf("error creating file: %v", err)
		}
		defer file.Close()

		// 文件第一次创建时写入包名和import
		_, err = file.WriteString(fmt.Sprintf("// Code generated by github.com/light-speak/lighthouse, DO NOT EDIT.\n\npackage %s\n\nimport (\n\"context\"\n\"gorm.io/gorm\"\n)\n", "graph"))
		if err != nil {
			return fmt.Errorf("error writing to file: %v", err)
		}
	} else {
		file, err = os.OpenFile(fileName, os.O_APPEND|os.O_WRONLY, 0600)
		if err != nil {
			return fmt.Errorf("error opening file: %v", err)
		}
		defer file.Close()
	}

	data := struct {
		ModelName string
		ParamName string
	}{
		ModelName: modelName,
		ParamName: "values",
	}

	tmpl := template.Must(template.New("scope").Parse(scopeModelTemplate))
	err = tmpl.Execute(file, data)
	if err != nil {
		return fmt.Errorf("error executing template: %v", err)
	}

	log.Info("Appended scope to file: %s\n", fileName)
	return nil
}
