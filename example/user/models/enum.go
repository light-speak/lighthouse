// Code generated by github.com/light-speak/lighthouse, DO NOT EDIT.
package models




type SortOrder int8

const (
  // The ASC enum value represents ascending order.
  SortOrderASC SortOrder = 1
  // The DESC enum value represents descending order.
  SortOrderDESC SortOrder = -1
)

func (e SortOrder) ToString() string {
  switch e {
  case SortOrderASC:
    return "ASC"
  case SortOrderDESC:
    return "DESC"
  default:
    return "unknown"
  }
}

var SortOrderMap = map[string]SortOrder{
  "ASC": SortOrderASC,
  "DESC": SortOrderDESC,
}
type TestEnum int8

const (
  // 这是A
  TestEnumA TestEnum = 1
  // 这是B
  TestEnumB TestEnum = 2
)

func (e TestEnum) ToString() string {
  switch e {
  case TestEnumA:
    return "A"
  case TestEnumB:
    return "B"
  default:
    return "unknown"
  }
}

var TestEnumMap = map[string]TestEnum{
  "A": TestEnumA,
  "B": TestEnumB,
}
type TestEnum2 int8

const (
  // <nil>
  TestEnum2A2 = iota
  // <nil>
  TestEnum2B2
)

func (e TestEnum2) ToString() string {
  switch e {
  case TestEnum2A2:
    return "A2"
  case TestEnum2B2:
    return "B2"
  default:
    return "unknown"
  }
}

var TestEnum2Map = map[string]TestEnum2{
  "A2": TestEnum2A2,
  "B2": TestEnum2B2,
}
